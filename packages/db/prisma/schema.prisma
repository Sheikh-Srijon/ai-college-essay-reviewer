generator client {
  provider     = "prisma-kysely"
  output       = "."
  fileName     = "types.ts"
  enumFileName = "enums.ts"
}

datasource db {
  provider     = "postgresql"
  url          = env("POSTGRES_URL")
  relationMode = "prisma"
}

enum SubscriptionPlan {
  FREE
  MONTHLY
  ANNUAL
  LIFETIME
}

//for stripe 
model Customer {
  id                     Int      @id @default(autoincrement())
  authUserId             String   @unique          // one customer per auth user (recommended)
  name                   String?
  plan                   SubscriptionPlan @default(FREE)
  lifetimeActivatedAt    DateTime?            // set when upgrading to lifetime

  // Stripe subs fields (empty for lifetime/one-time purchases)
  stripeCustomerId       String?  @unique
  stripeSubscriptionId   String?  @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?

  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@index([authUserId])
}

model Account {
  id                String  @id @default(dbgenerated("gen_random_uuid()"))
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()"))
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()"))
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}



enum Status {
  PENDING
  CREATING
  INITING
  RUNNING
  STOPPED
  DELETED
}

// Essay-related models
model Essay {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  title       String
  content     String   @db.Text
  school      String?
  type        String   // Common App, Why Us, Why Major, etc.
  userId      String

  // Essay metadata
  wordCount   Int      @default(0)
  status      EssayStatus @default(DRAFT)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  suggestions Suggestion[]
  changeHistory ChangeRecord[]
  rubricScore RubricScore?
  metaFeedback MetaEssayFeedback?
  
  @@index([userId])
  @@index([status])
}

enum EssayStatus {
  DRAFT
  SUBMITTED
  REVIEWED
  APPROVED
  REJECTED
}

model Suggestion {
  id              String   @id @default(dbgenerated("gen_random_uuid()"))
  essayId         String
  essay           Essay    @relation(fields: [essayId], references: [id], onDelete: Cascade)
  
  // Suggestion content
  originalText    String   @db.Text
  editedText      String   @db.Text
  note            String?  @db.Text
  
  // Position tracking
  originalStart   Int
  originalEnd     Int
  currentStart    Int
  currentEnd      Int
  
  // Status and type
  status          SuggestionStatus @default(OPEN)
  type            SuggestionType
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  changeHistory   ChangeRecord[]
  
  @@index([essayId])
  @@index([status])
}

enum SuggestionStatus {
  OPEN
  APPROVED
  REJECTED
  APPLIED
}

enum SuggestionType {
  GRAMMAR
  STYLE
  CONTENT
  STRUCTURE
  CLARITY
  TONE
}

model ChangeRecord {
  id            String   @id @default(dbgenerated("gen_random_uuid()"))
  essayId       String
  essay         Essay    @relation(fields: [essayId], references: [id], onDelete: Cascade)
  suggestionId  String?
  suggestion    Suggestion? @relation(fields: [suggestionId], references: [id])
  
  // Change details
  action        ChangeAction
  description   String   @db.Text
  changeData    Json?    // Store the actual change details
  
  // Timestamps
  createdAt     DateTime @default(now())
  
  @@index([essayId])
  @@index([suggestionId])
  @@index([createdAt])
}

enum ChangeAction {
  CREATE
  UPDATE
  DELETE
  APPROVE
  REJECT
  APPLY
}

model RubricScore {
  id            String   @id @default(dbgenerated("gen_random_uuid()"))
  essayId       String   @unique
  essay         Essay    @relation(fields: [essayId], references: [id], onDelete: Cascade)
  
  // Overall score
  overallScore  Float    // 0.0 to 10.0
  
  // Individual criteria scores
  clarity       Float    // 0.0 to 10.0
  creativity    Float    // 0.0 to 10.0
  structure     Float    // 0.0 to 10.0
  voice         Float    // 0.0 to 10.0
  impact        Float    // 0.0 to 10.0
  
  // Feedback
  areasToImprove String[] // Array of improvement areas
  whyScore      String   @db.Text // Explanation of the score
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model MetaEssayFeedback {
  id            String   @id @default(dbgenerated("gen_random_uuid()"))
  essayId       String   @unique
  essay         Essay    @relation(fields: [essayId], references: [id], onDelete: Cascade)
  
  // Feedback sections
  elevatorPitch String   @db.Text
  strengths     String[] // Array of strengths
  weaknesses    String[] // Array of weaknesses
  structure     String[] // Array of paragraph comments
  theme         String   @db.Text
  strategy      String   @db.Text
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}